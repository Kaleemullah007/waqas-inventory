/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ (() => {

eval("//  --------select2 js ---------\n$(document).ready(function () {\n  $(\".select2\").select2();\n});\nsetTimeout(function () {\n  $(document).ready(function () {\n    $(function () {\n      $('input[name=\"daterange\"]').daterangepicker({\n        opens: 'left'\n      }, function (start, end, label) {\n        console.log(\"A new date selection was made: \" + start.format('YYYY-MM-DD') + ' to ' + end.format('YYYY-MM-DD'));\n      });\n    });\n  }); // $(\".getSales\").on(\"change\", function () {\n  //     getSales();\n  // });\n}, 1000); // daterangepicker\n//  --------sidebar active transition js ---------\n\n$(document).on('click', '#sidebar li', function () {\n  $(this).addClass('active').siblings().removeClass('active');\n}); //  --------sidebar collapse toggle js ---------\n\n$(document).ready(function () {\n  $(\"#toggleSidebar\").click(function () {\n    $(\".left-menu\").toggleClass(\"hide\");\n    $(\".content-wrapper\").toggleClass(\"hide\");\n  });\n}); // --------- left menu sidebar dropdown toggle    ---------\n\n$('.sub-menu ul').hide();\n$('.sub-menu a').click(function () {\n  $(this).parent(\".sub-menu\").children(\"ul\").slideToggle(\"180\");\n  $(this).find(\".right\").toggleClass(\"bi-caret-up-fill bi-caret-down-fill\");\n}); // ------- datatables js ------\n\n$(document).ready(function () {\n  $('#order-table').DataTable();\n}); // ------- full screen button ---------\n\nvar toggleFullScreen = function toggleFullScreen() {\n  var doc = window.document;\n  var docEl = doc.documentElement;\n  var requestFullScreen = docEl.requestFullscreen || docEl.mozRequestFullScreen || docEl.webkitRequestFullScreen || docEl.msRequestFullscreen;\n  var cancelFullScreen = doc.exitFullscreen || doc.mozCancelFullScreen || doc.webkitExitFullscreen || doc.msExitFullscreen;\n\n  if (!doc.fullscreenElement && !doc.mozFullScreenElement && !doc.webkitFullscreenElement && !doc.msFullscreenElement) {\n    requestFullScreen.call(docEl);\n  } else {\n    cancelFullScreen.call(doc);\n  }\n}; //   $( document ).ready(function() {\n//     toggleFullScreen\n//  })\n\n\nallproducts = [];\n\nfunction getPrice(id) {\n  product_id = id + '-product_id';\n  selected_product = $(\"#\" + product_id).val();\n  var productid = $(\"#\" + id + \"-product_id\").val();\n\n  if (productid == 'Choose') {\n    alert(\"Select Product to add new\");\n    return false;\n  }\n\n  if ($.inArray(productid, allproducts) >= 0) {\n    var div = $(\"#setting-row\" + id + \" > div:parent\");\n    var x = $(\"#setting-row\" + id).prev().attr('id');\n    var backway = parseInt(x.split(\"\").reverse().join(\"\"));\n    $(\"input[name^='products']\").each(function (index, val) {\n      var id_loop = this.id;\n      var product_input_id = parseInt(id_loop);\n      product_id = product_input_id + '-product_id';\n      lop_selected_product = $(\"#\" + product_id).val(); // console.log(lop_selected_product+' '+selected_product)\n\n      if (selected_product == lop_selected_product) {\n        if (id_loop.includes('qty')) {\n          var row_id = parseInt(id_loop);\n          product_id = $(\"#\" + row_id + \"-product_id\").val();\n          product_qty = product_input_id + '-qty';\n          old_value = parseInt($(\"#\" + product_qty).val()) + 1;\n          $(\"#\" + product_qty).val(old_value);\n          $(\"#\" + id + \"-product_id\").val('');\n          $(\"#\" + id + \"-product_id\" + \" option\").filter(function () {\n            //may want to use $.trim in here\n            return $(this).text() == 'Choose';\n          }).prop('selected', true);\n          $.ajax({\n            type: \"GET\",\n            url: \"/get-price/\" + productid,\n            success: function success(data) {\n              // $(\"#\"+id+\"-sale_price\").val(data.sale_price)\n              // $(\"#\"+id+\"-available-stock\").css({\"font-size\":\"12px\",\"color\":data.color,\"font-weight\":\"bold\"}).text(\" Available(\"+data.stock+\")\");\n              calcualtePrice();\n            }\n          });\n        }\n      }\n    }); // return false;\n  } else {\n    $(\"input[name^='products']\").each(function (index, val) {\n      var id = this.id; // console.log(this.value+' '+id)\n\n      if (id.includes('qty')) {\n        var row_id = parseInt(id);\n        product_id = $(\"#\" + row_id + \"-product_id\").val();\n        allproducts.push(product_id);\n      }\n    });\n    $.ajax({\n      type: \"GET\",\n      url: \"/get-price/\" + productid,\n      success: function success(data) {\n        $(\"#\" + id + \"-sale_price\").val(data.sale_price);\n        $(\"#\" + id + \"-available-stock\").css({\n          \"font-size\": \"12px\",\n          \"color\": data.color,\n          \"font-weight\": \"bold\"\n        }).text(\" Available(\" + data.stock + \")\");\n        calcualtePrice();\n      }\n    });\n  } // $(\"input[name^='products']\").each(function (index,val) {\n  //     var id = this.id;\n  //     if(id.includes('qty')){\n  //         var row_id = parseInt(id);\n  //         product_id =  $(\"#\"+row_id+\"-product_id\").val();\n  //         allproducts.push(product_id);\n  //     }\n  //  });\n\n}\n\nfunction calcualtePrice() {\n  var paid_amount = $(\"#paid_amount\").val();\n  var qty = $(\"#qty\").val();\n  var discount = $(\"#discount\").val();\n  var n = $(\"input[name^='products']\").length;\n  var price = 0;\n  var qty = 0;\n  $(\"input[name^='products']\").each(function (index, val) {\n    var id = this.id;\n    var id_loop = id;\n    var product_input_id = parseInt(id_loop);\n    product_id = product_input_id + '-product_id';\n    lop_selected_product = $(\"#\" + product_id).val();\n\n    if (lop_selected_product != 'Choose') {\n      if (id.includes('qty')) {\n        var row_id = parseInt(id);\n        row_qty = $(\"#\" + row_id + \"-qty\").val();\n        row_price = $(\"#\" + row_id + \"-sale_price\").val();\n        qty += row_qty;\n        price += row_qty * row_price;\n      }\n    }\n  }); // var values = $(\"input[name='products[]']\")\n  //       .map(function(){return $(this).val();}).get();\n\n  sale_price = price;\n  qty = qty;\n  var total_amount = parseFloat(sale_price) - parseFloat(discount);\n  var subtotal = parseFloat(sale_price);\n  var remaining_amount = total_amount - parseFloat(paid_amount);\n  $(\"#remaining_amount\").val(remaining_amount);\n  $(\"#total\").val(total_amount);\n  $(\"#remaining\").text(remaining_amount);\n  $(\"#paid\").text(paid_amount);\n  $(\"#sub_total\").text(subtotal);\n  $(\"#show_discount\").text(discount);\n  $(\"#show_total\").text(total_amount);\n}\n\n$(document).on(\"change\", \".calculation\", function () {\n  calcualtePrice();\n});\n\nfunction showLoader() {\n  alert(\"showLoader\");\n}\n\nfunction hideLoader() {\n  alert(\"hideLoader\");\n}\n\nfunction getStatisticsForDashBoard() {\n  var daterange = $(\"#daterange\").val();\n  var search = $(\"#search\").val();\n  $.ajaxSetup({\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n  });\n  $.ajax({\n    type: \"POST\",\n    url: \"/get-dashboard\",\n    data: {\n      \"daterange\": daterange\n    },\n    success: function success(data) {\n      $('#searchable').html(data.html);\n    }\n  });\n}\n\nfunction getDeposit() {\n  var user_id = $(\"#user_id\").val();\n  $.ajaxSetup({\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n  });\n  $.ajax({\n    type: \"GET\",\n    url: \"/deposit-html\",\n    data: {\n      \"user_id\": user_id\n    },\n    success: function success(data) {\n      $('#searchable').html(data.html);\n    }\n  });\n}\n\nfunction getSales() {\n  var daterange = $(\"#daterange\").val();\n  var search = $(\"#search\").val();\n  var customer_id = $(\"#customer_id\").val();\n  $.ajaxSetup({\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n  });\n  $.ajax({\n    type: \"POST\",\n    url: \"/get-sales\",\n    data: {\n      \"daterange\": daterange,\n      \"search\": search,\n      \"customer_id\": customer_id\n    },\n    success: function success(data) {\n      $('#searchable').html(data.html);\n      $('#searchable_pagination').html(data.phtml);\n    }\n  });\n} //  Get products\n\n\nfunction getProducts() {\n  var search = $(\"#search\").val();\n  $.ajaxSetup({\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n  });\n  $.ajax({\n    type: \"POST\",\n    url: \"/get-products\",\n    data: {\n      \"search\": search\n    },\n    success: function success(data) {\n      $('#searchable').html(data.html);\n      $('#searchable_pagination').html(data.phtml);\n    }\n  });\n} // Get Purchases\n\n\nfunction getPurchases() {\n  var daterange = $(\"#daterange\").val();\n  var search = $(\"#search\").val();\n  $.ajaxSetup({\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n  });\n  $.ajax({\n    type: \"POST\",\n    url: \"/get-purchases\",\n    data: {\n      \"daterange\": daterange,\n      \"search\": search\n    },\n    success: function success(data) {\n      $('#searchable').html(data.html);\n      $('#searchable_pagination').html(data.phtml);\n    }\n  });\n} //  Get Productions\n\n\nfunction getProductions() {\n  var daterange = $(\"#daterange\").val();\n  var search = $(\"#search\").val();\n  $.ajaxSetup({\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n  });\n  $.ajax({\n    type: \"POST\",\n    url: \"/get-productions\",\n    data: {\n      \"daterange\": daterange,\n      \"search\": search\n    },\n    success: function success(data) {\n      $('#searchable').html(data.html);\n      $('#searchable_pagination').html(data.phtml);\n    }\n  });\n} // Get expenses\n\n\nfunction getExpenses() {\n  var daterange = $(\"#daterange\").val();\n  var search = $(\"#search\").val();\n  $.ajaxSetup({\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n  });\n  $.ajax({\n    type: \"POST\",\n    url: \"/get-expenses\",\n    data: {\n      \"daterange\": daterange,\n      \"search\": search\n    },\n    success: function success(data) {\n      $('#searchable').html(data.html);\n      $('#searchable_pagination').html(data.phtml);\n    }\n  });\n} // Get customers\n\n\nfunction getCustomers() {\n  var search = $(\"#search\").val();\n  $.ajaxSetup({\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n  });\n  $.ajax({\n    type: \"POST\",\n    url: \"/get-customers\",\n    data: {\n      \"search\": search\n    },\n    success: function success(data) {\n      $('#searchable').html(data.html);\n      $('#searchable_pagination').html(data.phtml);\n    }\n  });\n}\n\n$(document).on('click', '.export-csv-sale', function () {\n  //var restaurants_id = $('#restaurants_id').val();\n  var datetimerange = $('#daterange').val();\n  var search = $('#daterange').val();\n  var url = \"/get-csv-sales?daterange=\" + datetimerange + 'search=' + search,\n      new_window = window.open(url);\n});\n$(document).on('click', '.export-csv-production', function () {\n  //var restaurants_id = $('#restaurants_id').val();\n  var datetimerange = $('#daterange').val();\n  var search = $('#daterange').val();\n  var url = \"/get-csv-productions?daterange=\" + datetimerange + 'search=' + search,\n      new_window = window.open(url);\n});\n$(document).on('click', '.export-csv-expense', function () {\n  //var restaurants_id = $('#restaurants_id').val();\n  var datetimerange = $('#daterange').val();\n  var search = $('#daterange').val();\n  var url = \"/get-csv-expenses?daterange=\" + datetimerange + 'search=' + search,\n      new_window = window.open(url);\n});\n$(document).on('click', '.export-csv-purchase', function () {\n  //var restaurants_id = $('#restaurants_id').val();\n  var datetimerange = $('#daterange').val();\n  var search = $('#daterange').val();\n  var url = \"/get-csv-purchases?daterange=\" + datetimerange + 'search=' + search,\n      new_window = window.open(url);\n});\n$(document).on('click', '.export-csv-product', function () {\n  //var restaurants_id = $('#restaurants_id').val();\n  var datetimerange = $('#daterange').val();\n  var url = \"/get-csv-products?daterange=\" + datetimerange,\n      new_window = window.open(url);\n});\n\nfunction addSetting(id) {\n  // 0-qty\n  allproducts = [];\n  $(\"input[name^='products']\").each(function (index, val) {\n    var id = this.id; // console.log(this.value+' '+id)\n\n    if (id.includes('qty')) {\n      var row_id = parseInt(id);\n      product_id = $(\"#\" + row_id + \"-product_id\").val();\n      allproducts.push(product_id);\n    }\n  });\n  $(\"#setting-row\" + id + \"-href\").attr('disabled', true);\n  var OldRow = id;\n  totalrows = $(\".setting > .setting-row\").length;\n  totalrecord = $('.totalrecord-settings').length;\n  var div = $(\".setting > .setting-row:last\");\n  FirstRowId = div.attr('id');\n  lastRow = FirstRowId.split(\"setting-row\"); //  console.log(lastRow);\n\n  product_id = id + '-product_id';\n  selected_product = $(\"#\" + product_id).val();\n  console.log(selected_product);\n\n  if (selected_product == 'Choose') {\n    alert(\"Select Product to add new\");\n    return false;\n  }\n\n  if ($('#' + product_id).length > 1) {\n    product_qty = id + '-qty';\n    old_value = parseInt($(\"#\" + product_qty).val()) + 1;\n    $(\"#\" + product_qty).val(old_value);\n  } else {\n    var NextRow = parseInt(lastRow[1]) + 1;\n    $.ajaxSetup({\n      headers: {\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n      }\n    });\n    var addButton = '<a href=\"javascript:void(0)\" class=\"btn btn-success \" onclick=\"addSetting(' + NextRow + ')\"><i class=\"bi bi-plus-lg\"></i> Add</a>';\n    var removeButton = '<a href=\"javascript:void(0)\" class=\"btn btn-danger\" rel=' + FirstRowId + ' onclick=\"removeSetting(this.rel)\"><i class=\"bi bi-trash\"></i></a>';\n    $(\"#\" + FirstRowId + '-btn').html(removeButton); //  $(\".setting\").append(\"<div class='setting-row' id='setting-row\"+NextRow+\"' >Hello  <a href='#' class='btn btn-success ' onclick='removeSetting(\"+NextRow+\")'><i class='bi bi-minus-lg'></i> Remove</a></div>\");\n\n    products = [];\n    $(\"input[name^='products']\").each(function (index, val) {\n      var id = this.id;\n\n      if (id.includes('qty')) {\n        var row_id = parseInt(id);\n        product_id = $(\"#\" + row_id + \"-product_id\").val();\n        products.push(product_id);\n      }\n    }); //  console.log(totalrows+ ' '+ NextRow);\n\n    $.ajax({\n      type: 'get',\n      url: '/add-new-row',\n      data: {\n        new_row: NextRow,\n        totalrecord: totalrecord,\n        \"products\": products\n      },\n      dataType: 'html',\n      success: function success(data) {\n        $(\"#\" + FirstRowId + \"-btn\").html(removeButton);\n        $(\".setting\").append(data);\n      }\n    });\n  }\n}\n\nfunction removeSetting(id) {\n  $(\"#\" + id).remove();\n  allproducts = [];\n  $(\"input[name^='products']\").each(function (index, val) {\n    var id = this.id;\n\n    if (id.includes('qty')) {\n      var row_id = parseInt(id);\n      product_id = $(\"#\" + row_id + \"-product_id\").val();\n      allproducts.push(product_id);\n    }\n  });\n  totalrows = $(\".setting > .setting-row\").length;\n  totalrecord = $('.totalrecord-settings').length;\n  var div = $(\".setting > .setting-row:last\");\n  FirstRowId = div.attr('id');\n  console.log(FirstRowId);\n  lastRow = FirstRowId.split(\"setting-row\");\n  $.ajax({\n    type: 'get',\n    url: '/update-products',\n    data: {\n      \"products\": allproducts\n    },\n    dataType: 'html',\n    success: function success(data) {\n      console.log(data);\n      console.log(\"#\" + lastRow[1] + \"-product_id\");\n      $(\"#\" + lastRow[1] + \"-product_id\").html(data);\n      calcualtePrice();\n    }\n  });\n} //  Get Productions\n\n\n$(\"#FormData\").submit(function (event) {\n  event.preventDefault();\n  $.ajaxSetup({\n    headers: {\n      \"X-CSRF-TOKEN\": $('meta[name=\"csrf-token\"]').attr(\"content\")\n    }\n  });\n  FormData = $(\"#FormData\").serialize();\n  $.ajax({\n    type: \"POST\",\n    url: '/customer',\n    data: FormData,\n    success: function success(data) {\n      dropdownElement = $(\"#user_id\");\n      dropdownElement.find('option[value=' + data.data.id + ']').remove();\n      var updateOptionPP = '<option value=' + data.data.id + ' selected>' + data.data.name + '</option>';\n      $(\"#user_id\").append(updateOptionPP);\n      $(\"#add_customer\").modal('hide');\n    }\n  });\n}); //  Get Productions\n\n$(\"#FormDataVendor\").submit(function (event) {\n  event.preventDefault();\n  $.ajaxSetup({\n    headers: {\n      \"X-CSRF-TOKEN\": $('meta[name=\"csrf-token\"]').attr(\"content\")\n    }\n  });\n  FormData = $(\"#FormDataVendor\").serialize();\n  $.ajax({\n    type: \"POST\",\n    url: '/vendor',\n    data: FormData,\n    success: function success(data) {\n      dropdownElement = $(\"#user_id\");\n      dropdownElement.find('option[value=' + data.data.id + ']').remove();\n      var updateOptionPP = '<option value=' + data.data.id + ' selected>' + data.data.name + '</option>';\n      $(\"#user_id\").append(updateOptionPP);\n      $(\"#add_vendor\").modal('hide');\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/app.js"]();
/******/ 	
/******/ })()
;